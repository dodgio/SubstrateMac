
// =============================================================================
/*
    SubstrateMac

    Screensaver ported to Mac OS X by Warren Dodge of Hey Daddio!
    <http://www.heydaddio.com/>

    Original concept and code by
    Substrate Watercolor by J. Tarbell, June 2004, Albuquerque New Mexico
    Processing 0085 Beta syntax update, April 2005
    <http://complexification.net/>

    Curved crack drawing adapted from xscreensaver version by David Agraz Jan 2005
    The following license applies to the curved crack drawing code:
    xscreensaver, Copyright (c) 1997, 1998, 2002 Jamie Zawinski <jwz@jwz.org>
    Permission to use, copy, modify, distribute, and sell this software 
    and its documentation for any purpose is hereby granted without fee, 
    provided that the above copyright notice appear in all copies and 
    that both that copyright notice and this permission notice appear 
    in supporting documentation. No representations are made about the 
    suitability of this software for any purpose.  It is provided "as is" 
    without express or implied warranty.


    HeySubstrateColorPalette.h
    SubstrateMac/SubstrateiPhone Projects

    Handle color palette for sand drawing.

    Copyright (c) Hey Daddio! 2011.
*/
// -----------------------------------------------------------------------------


#import "HeySubstrateColorPalette.h"  


// -----------------------------------------------------------------------------
// MARK: Typedefs, enums, constants, etc.

typedef struct  
{
    u_int8_t blue;
    u_int8_t green;
    u_int8_t red;
    u_int8_t alpha;
} HeyBGRABytes;


// -----------------------------------------------------------------------------
// MARK: -
// MARK: Static "class var" variables.

HeySubstrateRGB const HeySubstrateRGBDefaultPalette[] = 
{ // Default palette of sand colors.
    {0x06, 0x05, 0x01}, {0x0A, 0x11, 0x16}, {0x2C, 0x0B, 0x02}, {0x0F, 0x24, 0x0B}, 
    {0x38, 0x10, 0x1F}, {0x0F, 0x27, 0x29}, {0x2A, 0x28, 0x0B}, {0x2C, 0x2F, 0x29}, 
    {0x27, 0x32, 0x47}, {0x53, 0x2B, 0x0F}, {0x2F, 0x46, 0x2B}, {0x5A, 0x31, 0x3B}, 
    {0x2F, 0x48, 0x4C}, {0x4E, 0x47, 0x0B}, {0x9F, 0x20, 0x04}, {0x4D, 0x4A, 0x2D}, 
    {0x71, 0x46, 0x09}, {0x87, 0x32, 0x3A}, {0x4C, 0x51, 0x4A}, {0x46, 0x54, 0x6A}, 
    {0x6D, 0x4D, 0x2C}, {0xDB, 0x21, 0x06}, {0x54, 0x67, 0x0D}, {0x6D, 0x51, 0x49}, 
    {0x90, 0x4C, 0x09}, {0x50, 0x67, 0x2F}, {0x70, 0x52, 0x6A}, {0x51, 0x68, 0x4F}, 
    {0x90, 0x4F, 0x2A}, {0x73, 0x69, 0x0A}, {0xB6, 0x48, 0x0A}, {0x50, 0x6A, 0x6D}, 
    {0x8E, 0x52, 0x4A}, {0x71, 0x69, 0x2E}, {0x8F, 0x52, 0x6E}, {0xB3, 0x4F, 0x28}, 
    {0x6F, 0x6C, 0x4E}, {0x91, 0x6E, 0x08}, {0xB5, 0x53, 0x47}, {0x6F, 0x72, 0x6C}, 
    {0x91, 0x6D, 0x2D}, {0xAD, 0x53, 0x79}, {0x66, 0x74, 0x8C}, {0x8F, 0x70, 0x4E}, 
    {0xB6, 0x70, 0x07}, {0x8F, 0x72, 0x6D}, {0xB3, 0x6E, 0x2C}, {0xDD, 0x5C, 0x1B}, 
    {0x73, 0x89, 0x6E}, {0xB1, 0x71, 0x4C}, {0xAF, 0x73, 0x6D}, {0x72, 0x8D, 0x8F}, 
    {0xA8, 0x72, 0x8E}, {0x93, 0x8B, 0x4B}, {0x90, 0x8A, 0x6F}, {0xD7, 0x73, 0x4B}, 
    {0xAF, 0x8F, 0x22}, {0xAA, 0x88, 0x5F}, {0xAA, 0x88, 0x7D}, {0xB3, 0x90, 0x44}, 
    {0x91, 0x95, 0x8D}, {0xCF, 0x8F, 0x05}, {0xC0, 0x88, 0x61}, {0x8A, 0x97, 0xAE}, 
    {0xA6, 0x99, 0x62}, {0xC0, 0x87, 0x7C}, {0xA3, 0x99, 0x77}, {0x98, 0xAA, 0x4C}, 
    {0xD3, 0x92, 0x2C}, {0xD3, 0x90, 0x4E}, {0xBB, 0x99, 0x60}, {0x96, 0xAA, 0x73}, 
    {0xB2, 0x98, 0x8E}, {0xF4, 0x90, 0x06}, {0xBB, 0x99, 0x77}, {0xB3, 0x95, 0xAD}, 
    {0x95, 0xAA, 0x93}, {0xF7, 0x8F, 0x2B}, {0xB7, 0xAB, 0x49}, {0xD4, 0x97, 0x6F}, 
    {0xF6, 0x8D, 0x4F}, {0xAA, 0xAA, 0x88}, {0xD1, 0x96, 0x8E}, {0xB6, 0xAA, 0x71}, 
    {0x94, 0xB0, 0xB1}, {0xAA, 0xAA, 0x9E}, {0xD6, 0xB0, 0x08}, {0xD1, 0x95, 0xAE}, 
    {0xBB, 0xAA, 0x88}, {0xCC, 0xAA, 0x5F}, {0xF4, 0x94, 0x6D}, {0xBB, 0xAA, 0x9D}, 
    {0xD5, 0xB2, 0x2C}, {0xCC, 0xAA, 0x77}, {0xA8, 0xBC, 0x84}, {0xCC, 0xAA, 0x88}, 
    {0xF3, 0x97, 0x8B}, {0xD6, 0xB3, 0x44}, {0xA8, 0xBB, 0x99}, {0xE1, 0xAA, 0x60}, 
    {0xCC, 0xAA, 0x9E}, {0xDD, 0xAA, 0x77}, {0xBB, 0xBB, 0x83}, {0xC9, 0xBB, 0x60}, 
    {0xF2, 0x99, 0xB2}, {0xF8, 0xB7, 0x06}, {0xE2, 0xAA, 0x88}, {0xBB, 0xBB, 0x99}, 
    {0xAD, 0xB8, 0xD0}, {0xB5, 0xBA, 0xB0}, {0xCC, 0xBB, 0x77}, {0xE2, 0xAA, 0x9F}, 
    {0xF5, 0xB6, 0x2B}, {0xCC, 0xBB, 0x88}, {0xDD, 0xBB, 0x5F}, {0xB9, 0xCC, 0x67}, 
    {0xCC, 0xBB, 0x99}, {0xDB, 0xD0, 0x08}, {0xF5, 0xB6, 0x4D}, {0xDD, 0xBB, 0x77}, 
    {0xDA, 0xCC, 0x2D}, {0xDD, 0xBB, 0x88}, {0xD3, 0xBA, 0xAF}, {0xF5, 0xB6, 0x70}, 
    {0xDD, 0xBB, 0x99}, {0xDA, 0xCC, 0x4E}, {0xEE, 0xCC, 0x1B}, {0xB8, 0xCC, 0xB4}, 
    {0xCB, 0xCC, 0x83}, {0xDB, 0xB8, 0xCF}, {0xEE, 0xCC, 0x33}, {0xCA, 0xCC, 0x99}, 
    {0xB4, 0xCD, 0xD1}, {0xDC, 0xCC, 0x6F}, {0xF6, 0xB9, 0x91}, {0xEE, 0xCC, 0x44}, 
    {0xFD, 0xD1, 0x03}, {0xCC, 0xCC, 0xAA}, {0xFF, 0xCC, 0x22}, {0xEE, 0xCC, 0x55}, 
    {0xDD, 0xCC, 0x88}, {0xF3, 0xBA, 0xB0}, {0xCC, 0xCC, 0xBB}, {0xFF, 0xCC, 0x33}, 
    {0xEE, 0xCC, 0x66}, {0xDD, 0xCC, 0x99}, {0xCC, 0xCC, 0xCC}, {0xFF, 0xCC, 0x44}, 
    {0xED, 0xDD, 0x1B}, {0xEE, 0xCC, 0x77}, {0xDD, 0xCC, 0xAA}, {0xCB, 0xDD, 0x82}, 
    {0xCA, 0xCC, 0xE2}, {0xFF, 0xCC, 0x55}, {0xEE, 0xCC, 0x88}, {0xEC, 0xDD, 0x33}, 
    {0xDD, 0xCC, 0xBB}, {0xCA, 0xDD, 0x99}, {0xDD, 0xEE, 0x0B}, {0xFF, 0xCC, 0x66}, 
    {0xEE, 0xCC, 0x99}, {0xEC, 0xDD, 0x44}, {0xDD, 0xCC, 0xCC}, {0xFF, 0xDD, 0x1B}, 
    {0xFF, 0xCC, 0x77}, {0xCB, 0xDD, 0xAA}, {0xEE, 0xCC, 0xAA}, {0xEC, 0xDD, 0x55}, 
    {0xDD, 0xDD, 0x82}, {0xDD, 0xCC, 0xE0}, {0xCA, 0xDD, 0xBB}, {0xFF, 0xCC, 0x88}, 
    {0xEB, 0xDD, 0x66}, {0xEE, 0xCC, 0xBB}, {0xFF, 0xDD, 0x33}, {0xCA, 0xDD, 0xCC}, 
    {0xDD, 0xDD, 0x99}, {0xFF, 0xCC, 0x99}, {0xEE, 0xCC, 0xCC}, {0xFF, 0xDD, 0x44}, 
    {0xC8, 0xDD, 0xDE}, {0xEE, 0xDD, 0x77}, {0xEC, 0xEE, 0x22}, {0xDC, 0xEE, 0x4E}, 
    {0xDD, 0xDD, 0xAA}, {0xFF, 0xCC, 0xAA}, {0xFF, 0xDD, 0x55}, {0xEE, 0xCC, 0xE0}, 
    {0xEE, 0xDD, 0x88}, {0xDD, 0xDD, 0xBB}, {0xFF, 0xCC, 0xBB}, {0xFF, 0xDD, 0x66}, 
    {0xFF, 0xCA, 0xCC}, {0xDA, 0xEE, 0x71}, {0xFE, 0xEF, 0x0A}, {0xEE, 0xDD, 0x99}, 
    {0xDD, 0xDD, 0xCC}, {0xFF, 0xDD, 0x77}, {0xFF, 0xCA, 0xE0}, {0xEE, 0xDD, 0xAA}, 
    {0xD6, 0xDC, 0xF1}, {0xDD, 0xDD, 0xDD}, {0xFF, 0xDD, 0x88}, {0xEE, 0xEE, 0x5E}, 
    {0xDB, 0xEE, 0x92}, {0xEE, 0xDD, 0xBB}, {0xFE, 0xF0, 0x2D}, {0xFF, 0xDD, 0x99}, 
    {0xEE, 0xDD, 0xCC}, {0xEE, 0xEE, 0x77}, {0xFF, 0xDD, 0xAA}, {0xFE, 0xEF, 0x4D}, 
    {0xEE, 0xDD, 0xDD}, {0xDC, 0xEE, 0xB6}, {0xEE, 0xEE, 0x88}, {0xFF, 0xDD, 0xBB}, 
    {0xFF, 0xEE, 0x66}, {0xEE, 0xEE, 0x99}, {0xFF, 0xDD, 0xCC}, {0xDC, 0xEE, 0xD5}, 
    {0xFF, 0xEE, 0x77}, {0xEE, 0xEE, 0xAA}, {0xFF, 0xDD, 0xDD}, {0xF8, 0xDD, 0xF2}, 
    {0xFF, 0xEE, 0x88}, {0xD9, 0xEE, 0xF0}, {0xEE, 0xEE, 0xBB}, {0xFF, 0xEE, 0x99}, 
    {0xED, 0xFF, 0x71}, {0xEE, 0xEE, 0xCC}, {0xFF, 0xEE, 0xAA}, {0xEE, 0xEE, 0xDD}, 
    {0xFF, 0xEE, 0xBB}, {0xFF, 0xFF, 0x60}, {0xED, 0xFF, 0x94}, {0xEE, 0xEE, 0xEE}, 
    {0xFF, 0xEE, 0xCC}, {0xEE, 0xEE, 0xFF}, {0xFF, 0xFF, 0x77}, {0xED, 0xFF, 0xAA}, 
    {0xFF, 0xEE, 0xDD}, {0xFF, 0xFF, 0x88}, {0xED, 0xFF, 0xBB}, {0xFF, 0xEE, 0xEE}, 
    {0xFF, 0xFF, 0x99}, {0xED, 0xFF, 0xCC}, {0xFF, 0xEE, 0xFF}, {0xFF, 0xFF, 0xAA}, 
    {0xED, 0xFF, 0xDD}, {0xFF, 0xFF, 0xBB}, {0xED, 0xFF, 0xEE}, {0xEB, 0xFF, 0xFF}, 
    {0xFF, 0xFF, 0xCC}, {0xFF, 0xFF, 0xDD}, {0xFF, 0xFF, 0xEE}, {0xFF, 0xFF, 0xFF} 
};
// Number of colors in palette. 
// Note: kHeyMaxDefaultPaletteEntries must be <= kHeyMaxPaletteEntries.
static const int kHeyMaxDefaultPaletteEntries = (int)(sizeof(HeySubstrateRGBDefaultPalette) / sizeof(HeySubstrateRGB));
static const int kHeyMaxPaletteEntries = 256;


// -----------------------------------------------------------------------------
// MARK: -
// MARK: Private Class Extension
@interface HeySubstrateColorPalette ()

- (void)sampleImageToPalette:(CGImageRef)anImageRef;
- (void)saveColorImageThumbnail:(CGImageRef)anImageRef;
- (void)loadDefaultPalette;

@end


// -----------------------------------------------------------------------------
// MARK: -
// MARK: HeySubstrateColorPalette
@implementation HeySubstrateColorPalette


// -----------------------------------------------------------------------------
// MARK: -
// MARK: Lifecycle

- (id)init
{
	self = [super init];
    if (self)
    {
        heyColors_ = [[NSMutableArray arrayWithCapacity:kHeyMaxPaletteEntries] retain];
        [self loadDefaultPalette];
    }
    return self;
}


- (void)dealloc
{
    [heyColors_ release], heyColors_ = nil;
    [super dealloc];
}
//- (void)finalize
//{
//}


// -----------------------------------------------------------------------------
// MARK: -
// MARK: Instance Methods

- (HEYCOLOR *)randomColor
{
    HEYCOLOR *randColor = nil;
    NSUInteger cnt = [heyColors_ count];
    if (cnt)
    {
        randColor = [heyColors_ objectAtIndex:(arc4random() % cnt)];
    }
    return randColor;
}


- (void)sampleImage:(CGImageRef)anImageRef
{
    [self sampleImageToPalette:anImageRef];
    [self saveColorImageThumbnail:anImageRef];
}


// private
- (void)sampleImageToPalette:(CGImageRef)anImageRef
{
    // Create a known-format bitmap context.
    size_t w = CGImageGetWidth(anImageRef);
    size_t h = CGImageGetHeight(anImageRef);
    int bitsPerPixel = 8;
    int bytesPerRow = w * 4;
    CGColorSpaceRef space = CGColorSpaceCreateDeviceRGB();
    if (space == NULL)
    {
        return;
    }
    void * bitmapData = malloc(bytesPerRow * h);
    if (bitmapData == NULL)
    {
        CGColorSpaceRelease(space);
        return;
    }
    // BGRA format bitmap context
    CGContextRef ctx = CGBitmapContextCreate(bitmapData, w, h, bitsPerPixel, bytesPerRow, space, (kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst));
    if (ctx == NULL)
    {
        CGColorSpaceRelease(space);
        free(bitmapData);
        return;
    }
    CGColorSpaceRelease(space);
    
    // Draw the image into the new context, get the context's data.
    CGContextDrawImage(ctx, CGRectMake(0.0f, 0.0f, w, h), anImageRef);
    void *readData = CGBitmapContextGetData(ctx);
    if (readData != bitmapData)
    {
        NSLog(@"WTF!");
    }
    
    // Sample the pixel data
    [heyColors_ removeAllObjects];
    HeyBGRABytes *colorBytes = readData;
    for (int i = 0; i < kHeyMaxPaletteEntries; i++)
    {
        int j = arc4random() % (w * h);
        HEYCOLOR *c = [HEYCOLOR HeyColorWithRed:(colorBytes[j].red / 255.0f) 
                                        green:(colorBytes[j].green / 255.0f) 
                                        blue:(colorBytes[j].blue / 255.0f) 
                                        alpha:(colorBytes[j].alpha / 255.0f)];
        [heyColors_ addObject:c];
    }
    CGContextRelease(ctx);
    free(bitmapData);
}


- (void)saveColorImageThumbnail:(CGImageRef)anImageRef
{
    CGRect thumbRect = CGRectMake(0.0f, 0.0f, 128.0f, 128.0f);
    CGImageAlphaInfo alphaInfo = CGImageGetAlphaInfo(anImageRef);
    if (alphaInfo == kCGImageAlphaNone)
    {
        alphaInfo = kCGImageAlphaNoneSkipLast;
    }
    void *ctxBytes = malloc(thumbRect.size.width * thumbRect.size.height * 4);
    CGContextRef ctx = CGBitmapContextCreate(ctxBytes, thumbRect.size.width, thumbRect.size.height, CGImageGetBitsPerComponent(anImageRef), 4 * thumbRect.size.width, CGImageGetColorSpace(anImageRef), alphaInfo);
    CGContextDrawImage(ctx, thumbRect, anImageRef);
    CGImageRef img = CGBitmapContextCreateImage(ctx);
    UIImage *uImg = [UIImage imageWithCGImage:img];
    NSData *imgData = UIImagePNGRepresentation(uImg);
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    if ([paths count] > 0)
    {
        NSString *docDirPath = [paths objectAtIndex:0];
        NSString *thumbPath = [docDirPath stringByAppendingPathComponent:kHeySubstrateColorImageThumbnail];
        [imgData writeToFile:thumbPath atomically:YES];
    }

    CGImageRelease(img);
    CGContextRelease(ctx);
    free(ctxBytes);
}


- (void)loadDefaultPalette
{
    for (int i = 0; i < kHeyMaxDefaultPaletteEntries; i++)
    {
        HeySubstrateRGB rgb = HeySubstrateRGBDefaultPalette[i];
        HEYCOLOR *c = [HEYCOLOR HeyColorWithRed:rgb.redValue / 255.0f
                            green:rgb.greenValue / 255.0f
                            blue:rgb.blueValue / 255.0f
                            alpha:1.0f];
        [heyColors_ addObject:c];
    }
}


@end


// End of HeySubstrateColorPalette.m
// =============================================================================

